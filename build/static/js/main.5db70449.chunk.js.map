{"version":3,"sources":["Images/LOGO.ico","Components/LeftNavBar.js","Components/TopBar.js","Components/TittleCard.js","Components/CardSlider.js","Routes/Home.js","Routes/Movies.js","Routes/TvShows.js","useInventory.js","Routes/Settings.js","Routes/Favorites.js","Components/NSeason.js","Components/SeriesEpisodes.js","Routes/TitlePage.js","Routes/Search.js","App.js","index.js"],"names":["LeftNavBar","location","useLocation","className","title","src","LOGO","alt","to","color","pathname","remote","window","require","TopBar","actionCenter","ACTION","getCurrentWindow","minimize","close","isMaximized","unmaximize","maximize","id","onClick","size","path","app","TittleCard","imgpath","join","getAppPath","_id","replaceAll","style","backgroundImage","Title","Year","Rated","imdbRating","CardSlider","tittles","slide","useRef","current","scrollBy","left","clientWidth","behavior","right","fill","ref","map","index","Home","useContext","DATABASE","data","sort","a","b","Math","random","slice","filter","ele","Type","Movies","movie","TvShows","series","Datastore","pathmod","fs","inventory","filename","db","apikey","readFileSync","useInventory","useState","setData","acceptExt","fileOfDir","filepath","isSub","item","parse","includes","ext","findOne","err","res","console","log","filetime","statSync","mtime","mtimeMs","prev","tname","ryear","match","trim","replace","fetch","then","json","Response","Runtime","Genre","Director","Actors","Plot","Language","Poster","Number","response","arrayBuffer","insert","isFav","newDoc","writeFileSync","Uint8Array","catch","fetchdetails","name","useEffect","loadDatabase","find","length","hash","forEach","readdir","r","shell","Settings","folders","setFolder","userapi","setuserapi","Apikey","setkey","onSubmit","e","preventDefault","resolve","target","value","isDirectory","error","required","type","FolderFile","deletePath","i","remove","splice","split","sep","openExternal","key","placeholder","Favorites","favs","NSeason","season","show","setShow","rotate","maxHeight","episodes","epi","openPath","epipath","SeriesEpisodes","folderpath","seasons","setSeasons","acceptedVideos","mainepisodes","TitlePage","useParams","findIndex","toUpperCase","flag","update","$set","multi","d","showItemInFolder","Search","search","setSearch","setRes","toLowerCase","toString","onChange","createContext","App","Provider","textAlign","exact","component","SETTINGS","HOME","MOVIES","TVSHOWS","FAVO","SEARCH","TPAGE","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAAe,MAA0B,iC,sECK1B,SAASA,IACpB,IAAMC,EAAWC,cACjB,OACI,gCACI,qBAAKC,UAAU,YAAf,SACI,qBAAKC,MAAM,UAAUC,IAAKC,EAAMC,IAAI,OAExC,sBAAKJ,UAAU,YAAf,UACI,cAAC,IAAD,CAAMA,UAAU,OAAOK,GAAG,IAAIJ,MAAM,OAApC,SAA2C,cAAC,IAAD,CAAMK,MAA6B,MAAtBR,EAASS,SAAmB,MAAQ,cAC5F,cAAC,IAAD,CAAMP,UAAU,OAAOK,GAAG,UAAUJ,MAAM,SAA1C,SAAmD,cAAC,IAAD,CAAMK,MAA6B,YAAtBR,EAASS,SAAyB,MAAQ,cAC1G,cAAC,IAAD,CAAMP,UAAU,OAAOK,GAAG,WAAWJ,MAAM,yBAA3C,SAAoE,cAAC,IAAD,CAAIK,MAA6B,aAAtBR,EAASS,SAA0B,MAAQ,cAC1H,cAAC,IAAD,CAAMP,UAAU,OAAOK,GAAG,aAAaJ,MAAM,YAA7C,SAAyD,cAAC,IAAD,CAAOK,MAA6B,eAAtBR,EAASS,SAA4B,MAAQ,cACpH,cAAC,IAAD,CAAMP,UAAU,OAAOK,GAAG,UAAUJ,MAAM,SAA1C,SAAmD,cAAC,IAAD,CAAQK,MAA6B,YAAtBR,EAASS,SAAyB,MAAQ,iBAEhH,qBAAKP,UAAU,WAAf,SACI,cAAC,IAAD,CAAMA,UAAU,OAAOK,GAAG,YAAYJ,MAAM,WAA5C,SAAuD,cAAC,IAAD,CAAUK,MAA4B,cAArBR,EAASS,SAA0B,MAAQ,mB,4BChB3HC,EAAWC,OAAOC,QAAQ,YAA1BF,OAEO,SAASG,IACpB,SAASC,EAAaC,GAClB,IAAMJ,EAASD,EAAOM,mBACP,aAAXD,EAAuBJ,EAAOM,WACd,UAAXF,EAAoBJ,EAAOO,QAChB,aAAXH,IACLJ,EAAOQ,cAAgBR,EAAOS,aAAeT,EAAOU,YAK5D,OACI,sBAAKC,GAAG,SAAR,UACI,wBAAQC,QAAS,kBAAMT,EAAa,aAApC,SAAkD,cAAC,IAAD,CAAOU,KAAK,SAC9D,wBAAQD,QAAS,kBAAMT,EAAa,aAApC,SAAkD,cAAC,IAAD,CAAQU,KAAK,SAC/D,wBAAQD,QAAS,kBAAMT,EAAa,UAApC,SAA+C,cAAC,IAAD,CAAGU,KAAK,Y,2BCnB7DC,EAAOd,OAAOC,QAAQ,QACpBc,EAAQf,OAAOC,QAAQ,oBAAvBc,IAEO,SAASC,EAAT,GAAgC,IAAVxB,EAAS,EAATA,MAC3ByB,EAAU,QAAUH,EAAKI,KAAKH,EAAII,aAAc,YAAa,UAAzC,UAAuD3B,EAAM4B,IAA7D,SAAwEC,WAAW,KAAM,KAAO,KAE1H,OACI,cAAC,IAAD,CAAMzB,GAAE,kBAAaJ,EAAM4B,KAAO7B,UAAU,cAAc+B,MAAO,CAAEC,gBAAiBN,GAApF,SACI,sBAAK1B,UAAU,cAAf,UAEI,sBAAMA,UAAU,cAAhB,SAA+BC,EAAMgC,QACrC,qCAAQhC,EAAMiC,KAAd,WAAuBjC,EAAMkC,MAA7B,OACA,2CAAclC,EAAMmC,WAApB,YCVD,SAASC,EAAT,GAAkC,IAAZC,EAAW,EAAXA,QAC3BC,EAAQC,mBACd,OACI,sBAAKxC,UAAU,cAAf,UAEI,yBAAQqB,QAAS,kBAAMkB,EAAME,QAAQC,SAAS,CAAEC,KAAMJ,EAAME,QAAQG,YAAaC,SAAU,YAAad,MAAO,CAAEe,MAAO,QAAU9C,UAAU,0BAA5I,cAAuK,cAAC,IAAD,CAAkB+C,KAAK,QAAQzC,MAAM,MAAMgB,KAAK,OAAvN,OACA,yBAAQD,QAAS,kBAAMkB,EAAME,QAAQC,SAAS,CAAEC,MAAOJ,EAAME,QAAQG,YAAaC,SAAU,YAAad,MAAO,CAAEY,KAAM,QAAU3C,UAAU,yBAA5I,cAAsK,cAAC,IAAD,CAAiB+C,KAAK,QAAQzC,MAAM,MAAMgB,KAAK,OAArN,OACA,qBAAK0B,IAAKT,EAAOvC,UAAU,mBAA3B,SACKsC,EAAQW,KAAI,SAAChD,EAAOiD,GAAR,OAAkB,cAAC,EAAD,CAAmBjD,MAAOA,GAAdiD,WCR5C,SAASC,IACpB,MAAeC,qBAAWC,IAAnBC,EAAP,oBAEA,OACI,sBAAKtD,UAAU,iBAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,8CACA,cAAC,EAAD,CAAYsC,QAAS,YAAIgB,GAAMC,MAAK,SAACC,EAAGC,GAAJ,OAAUC,KAAKC,SAAW,GAAK,GAAK,KAAGC,MAAM,EAAG,QAExF,sBAAK5D,UAAU,iBAAf,UACI,4CACA,cAAC,EAAD,CAAYsC,QAAS,YAAIgB,GAAMO,QAAO,SAAAC,GAAG,MAAiB,UAAbA,EAAIC,QAAkBR,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAErB,WAAaoB,EAAEpB,cAAYwB,MAAM,EAAG,QAE5H,sBAAK5D,UAAU,iBAAf,UACI,8CACA,cAAC,EAAD,CAAYsC,QAAS,YAAIgB,GAAMO,QAAO,SAAAC,GAAG,MAAiB,WAAbA,EAAIC,QAAmBR,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAErB,WAAaoB,EAAEpB,cAAYwB,MAAM,EAAG,WCf1H,SAASI,IACpB,MAAeZ,qBAAWC,IAAnBC,EAAP,oBAGA,OACI,sBAAKtD,UAAU,iBAAf,UACI,uBACA,wCACA,qBAAKA,UAAU,iBAAf,SACKsD,EAAKO,QAAO,SAAAC,GAAG,MAAiB,UAAbA,EAAIC,QAAkBd,KAAI,SAACgB,EAAOf,GAAR,OAAkB,cAAC,EAAD,CAAmBjD,MAAOgE,GAAdf,WCT7E,SAASgB,IACpB,MAAed,qBAAWC,IAAnBC,EAAP,oBACA,OACI,sBAAKtD,UAAU,iBAAf,UACI,uBACA,0CACA,qBAAKA,UAAU,iBAAf,SACKsD,EAAKO,QAAO,SAAAC,GAAG,MAAiB,WAAbA,EAAIC,QAAmBd,KAAI,SAACkB,EAAQjB,GAAT,OAAmB,cAAC,EAAD,CAAmBjD,MAAOkE,GAAdjB,W,4BCTxFkB,EAAY3D,OAAOC,QAAQ,QACzBc,EAAQf,OAAOC,QAAQ,oBAAvBc,IACF6C,EAAU5D,OAAOC,QAAQ,QACzB4D,EAAK7D,OAAOC,QAAQ,MAEpB6D,EAAY,IAAIH,EAAU,CAAEI,SAAS,GAAD,OAAKhD,EAAII,aAAT,2BACpC6C,EAAK,IAAIL,EAAU,CAAEI,SAAS,GAAD,OAAKhD,EAAII,aAAT,6BACtB8C,EAASJ,EAAGK,aAAH,UAAmBnD,EAAII,aAAvB,wBAA2D,SAElE,SAASgD,IACpB,MAAwBC,mBAAS,IAAjC,mBAAOvB,EAAP,KAAawB,EAAb,KACMC,EAAY,CAAC,GAAI,OAAQ,OAAQ,QAkCvC,SAASC,EAAUC,EAAUC,GACzB,IAAMC,EAAOd,EAAQe,MAAMH,GACtBF,EAAUM,SAASF,EAAKG,MAC7Bf,EAAUgB,QAAQ,CAAEN,aAAY,SAACO,EAAKC,GAClC,GAAID,EAAK,OAAOE,QAAQC,IAAIH,GAC5B,GAAIN,GAASO,EAAK,CACd,IAAMG,EAAWtB,EAAGuB,SAASZ,GAC7BQ,EAAIK,MAAQF,EAASG,QACrBjB,GAAQ,SAAAkB,GAAI,OAAKP,GAAL,mBAAaO,YAvCrC,SAAsBC,EAAOhB,EAAUC,GACnC,IAAIgB,EAAQD,EAAME,MAAM,eACxBD,EAAQA,EAAQA,EAAM,GAAGE,OAAOD,MAAM,QAAQ,GAAK,GACnDF,EAAQA,EAAMI,QAAQ,cAAe,IAAID,OACzCE,MAAM,mCAAD,OAAoC5B,EAApC,cAAgDuB,EAAhD,cAA2DC,IAC3DK,MAAK,SAAAd,GAAG,OAAIA,EAAIe,UAChBD,MAAK,SAAAd,GACF,GAAKA,GAAyB,WAAf,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAKgB,UAAjB,CACA,IAAMxE,EAAmGwD,EAAnGxD,MAAOC,EAA4FuD,EAA5FvD,KAAM6B,EAAsF0B,EAAtF1B,KAAM5B,EAAgFsD,EAAhFtD,MAAOuE,EAAyEjB,EAAzEiB,QAASC,EAAgElB,EAAhEkB,MAAOC,EAAyDnB,EAAzDmB,SAAUC,EAA+CpB,EAA/CoB,OAAQC,EAAuCrB,EAAvCqB,KAAMC,EAAiCtB,EAAjCsB,SAAUC,EAAuBvB,EAAvBuB,OAAQ5E,EAAeqD,EAAfrD,WAC1F4E,EAASA,EAAOX,QAAQ,MAAO,OAC/BjE,EAAa6E,OAAO7E,GACpBF,EAAO+E,OAAO/E,GAEdoE,MAAMU,GAAQT,MAAK,SAAAW,GAAQ,OAAIA,EAASC,iBAAeZ,MAAK,SAAAW,GAEpDhC,GACAX,EAAU6C,OAAO,CAAEnF,QAAOC,OAAM6B,OAAM5B,QAAOuE,UAASC,QAAOC,WAAUC,SAAQC,OAAMC,WAAU3E,aAAY6C,WAAUoC,OAAO,IACxH,SAAC7B,EAAK8B,GACE9B,IACJlB,EAAGiD,cAAclD,EAAQ1C,KAAKH,EAAII,aAAc,YAAa,UAA5C,UAA0D0F,EAAOzF,IAAjE,SAA6E,IAAI2F,WAAWN,IAC7GpC,GAAQ,SAAAkB,GAAI,4BAAQA,GAAR,CAAcsB,kBAK7CG,OAAM,SAAAjC,GACHE,QAAQC,IAAIH,MAeXkC,CAAavC,EAAKwC,KAAKvB,OAAQnB,EAAUC,MAoBtD,OAhBA0C,qBAAU,WACN,IAAI1C,GAAQ,EAYZ,OAXAT,EAAGoD,eACHtD,EAAUsD,eACVpD,EAAGqD,KAAK,IAAI,SAACtC,EAAK0B,GACd,GAAI1B,GAA2B,IAApB0B,EAASa,QAA2B,KAAXrD,EAAe,OAAOjE,OAAOX,SAASkI,KAAO,YACjFd,EAASe,SAAQ,SAAAnE,GACbQ,EAAG4D,QAAQpE,EAAIvC,MAAM,SAACiE,EAAKC,GACvBA,EAAIwC,SAAQ,SAAAE,GAAC,OAAInD,EAAUX,EAAQ1C,KAAKmC,EAAIvC,KAAM4G,GAAIjD,YAG9DQ,QAAQC,IAAI,uBAET,kBAAMT,GAAQ,KACtB,IAEI,CAAC5B,EAAMwB,GCzElB,IAAMV,EAAY3D,OAAOC,QAAQ,QACzB0H,EAAU3H,OAAOC,QAAQ,YAAzB0H,MACA5G,EAAQf,OAAOC,QAAQ,oBAAvBc,IACF6C,EAAU5D,OAAOC,QAAQ,QACzB4D,EAAK7D,OAAOC,QAAQ,MAEpB+D,EAAK,IAAIL,EAAU,CAAEI,SAAS,GAAD,OAAKhD,EAAII,aAAT,6BAEpB,SAASyG,IACpB,MAA6BxD,mBAAS,IAAtC,mBAAOyD,EAAP,KAAgBC,EAAhB,KACA,EAA8B1D,oBAAS,iBAAiB,KAAXH,EAAgB,KAAOA,KAApE,mBAAO8D,EAAP,KAAgBC,EAAhB,KAuCA,OAXAb,qBAAU,WACN,IAAI1C,GAAQ,EAKZ,OAJAT,EAAGoD,eACHpD,EAAGqD,KAAK,IAAI,SAACtC,EAAKlC,GACV4B,GAAOqD,EAAUjF,MAElB,WACH4B,GAAQ,KAEb,IAGC,sBAAKlF,UAAU,iBAAf,UACI,0CACA,qBAAKA,UAAU,eAAf,SACKwI,EAAU,oDAAuBA,EAAvB,IAAgC,sBAAMnH,QAAS,kBAAMoH,EAAW,OAAOzI,UAAU,UAAjD,sBAAhC,OAAqH,cAAC0I,EAAD,CAAQC,OAAQF,MAEpJ,sBAAKzI,UAAU,cAAf,UACI,iFACA,uBAAM4I,SA7ClB,SAAoBC,GAChBA,EAAEC,iBACF,IAAMvH,EAAO8C,EAAQ0E,QAAQF,EAAEG,OAAOzH,KAAK0H,OAC3C,IAEI,IADY3E,EAAGuB,SAAStE,GACf2H,cAAe,OAAOL,EAAEG,OAAOzH,KAAK0H,MAAQJ,EAAEG,OAAOzH,KAAK0H,MAAQ,mBAC3ExE,EAAG2C,OAAO,CAAE7F,SAAQ,SAACiE,GACjB,GAAIA,EAAK,OAAOE,QAAQC,IAAIH,GAC5B+C,GAAU,SAAAvC,GAAI,OAAK,CAAEzE,SAAP,mBAAkByE,UAEtC,MAAOmD,GAEL,YADAN,EAAEG,OAAOzH,KAAK0H,MAAQJ,EAAEG,OAAOzH,KAAK0H,MAAQ,8BAkCxC,UACI,uBAAOG,UAAQ,EAACC,KAAK,OAAO1B,KAAK,SACjC,yBAAQ0B,KAAK,SAAb,cAAuB,cAAC,IAAD,CAAY/I,MAAM,QAAzC,WAEHgI,EAAQrF,KAAI,SAACa,EAAKZ,GAAN,OAAgB,cAACoG,EAAD,CAAYC,WAAY,kBAjC7ChI,EAiC8DuC,EAAIvC,KAjC5DiI,EAiCkEtG,OAhCxFuB,EAAGgF,OAAO,CAAElI,SAAQ,SAACiE,GACjB,GAAIA,EAAK,OAAOE,QAAQC,IAAIH,GAC5B+C,GAAU,SAAAvC,GAEN,OADAA,EAAK0D,OAAOF,EAAG,GACR,YAAIxD,SALvB,IAAoBzE,EAAMiI,GAiCsFjI,KAAMuC,EAAIvC,MAAjB2B,YAO7G,SAASoG,EAAT,GAA2C,IAArB/H,EAAoB,EAApBA,KAAMgI,EAAc,EAAdA,WACxB,OACI,sBAAKvJ,UAAU,cAAf,UACI,gCACI,qBAAKA,UAAU,eAAf,SACKuB,EAAKoI,MAAMtF,EAAQuF,KAAKrI,EAAKoI,MAAMtF,EAAQuF,KAAK7B,OAAS,KAE9D,qBAAK/H,UAAU,cAAf,SAA8BuB,OAElC,qBAAKF,QAAS,kBAAMkI,KAApB,SAAmC,cAAC,IAAD,CAAOjI,KAAK,YAK3D,SAASoH,EAAT,GAA6B,IAAXC,EAAU,EAAVA,OAkBd,OACI,qCACI,yGAA2E,sBAAMtH,QAAS,kBAAM+G,EAAMyB,aAAa,wCAAwC7J,UAAU,UAA1F,0BAA3E,OACA,sBACA,uBAAM4I,SArBd,SAAmBC,GACfA,EAAEC,iBACF,IAAMgB,EAAMjB,EAAEG,OAAOc,IAAIb,MACzB3C,MAAM,8CAAD,OAA+CwD,IAC/CvD,MAAK,SAAAd,GAAG,OAAIA,EAAIe,UAChBD,MAAK,SAAAd,GACmB,SAAjBA,EAAIgB,UACJkC,EAAOmB,GACPxF,EAAGiD,cAAH,UAAoB/F,EAAII,aAAxB,wBAA4DkI,IAE5DjB,EAAEG,OAAOc,IAAIb,OAAS,6CAW9B,UACI,uBAAOc,YAAY,kDAAwCX,UAAQ,EAACC,KAAK,OAAO1B,KAAK,QACrF,wBAAQ0B,KAAK,SAAb,SAAsB,cAAC,IAAD,YC1GvB,SAASW,KACpB,MAAe5G,qBAAWC,IAAnBC,EAAP,oBACA,OACI,sBAAKtD,UAAU,iBAAf,UACI,uBACA,2CACA,qBAAKA,UAAU,iBAAf,SACKsD,EAAKO,QAAO,SAAAC,GAAG,OAAIA,EAAIuD,SAAOpE,KAAI,SAACgH,EAAM/G,GAAP,OAAiB,cAAC,EAAD,CAAmBjD,MAAOgK,GAAd/G,W,+BCRxEkF,GAAU3H,OAAOC,QAAQ,YAAzB0H,MAEO,SAAS8B,GAAT,GAA8B,IAAXC,EAAU,EAAVA,OAC9B,EAAwBtF,oBAAS,GAAjC,mBAAOuF,EAAP,KAAaC,EAAb,KAEA,OACI,sBAAKrK,UAAU,cAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,6BAAKmK,EAAOxC,OACZ,cAAC,KAAD,CAAiB2C,OAAO,KAAKjJ,QAAS,kBAAMgJ,GAAQ,SAAArE,GAAI,OAAKA,WAEjE,qBAAKhG,UAAU,gBAAgB+B,MAAO,CAAEwI,UAAWH,EAAO,QAAU,GAApE,SACKD,EAAOK,SAASvH,KAAI,SAACwH,EAAIvH,GAAL,OACjB,sBAAiBlD,UAAU,UAAUqB,QAAS,kBAAM+G,GAAMsC,SAASD,EAAIE,UAAvE,UACI,cAAC,KAAD,CAAYrK,MAAM,QAClB,+BAAOmK,EAAI9C,SAFLzE,WCb9B,IAAM3B,GAAOd,OAAOC,QAAQ,QACtB4D,GAAK7D,OAAOC,QAAQ,MAEX,SAASkK,GAAT,GAAyC,IAAfC,EAAc,EAAdA,WACrC,EAA8BhG,mBAAS,IAAvC,mBAAOiG,EAAP,KAAgBC,EAAhB,KAmBA,OAjBAnD,qBAAU,WACN,IAAMoD,EAAiB,CAAC,OAAQ,OAAQ,QACxC1G,GAAG4D,QAAQ2C,GAAY,SAACrF,EAAKsF,GACrBtF,GACJsF,EAAQ7C,SAAQ,SAAAkC,GACmB,KAA3B5I,GAAK6D,MAAM+E,GAAQ7E,KACvBhB,GAAG4D,QAAQ3G,GAAKI,KAAKkJ,EAAYV,IAAS,SAAC3E,EAAKgF,GAC5C,IAAIS,EAAeT,EAAS3G,QAAO,SAAA4G,GAAG,OAAIO,EAAe3F,SAAS9D,GAAK6D,MAAMqF,GAAKnF,QAClF2F,EAAeA,EAAahI,KAAI,SAAAwH,GAC5B,MAAO,CAAEE,QAASpJ,GAAKI,KAAKkJ,EAAYV,EAAQM,GAAM9C,KAAMpG,GAAK6D,MAAMqF,GAAK9C,SAEhFoD,GAAW,SAAA/E,GAAI,OAAK,CAAE2B,KAAMwC,EAAQK,SAAUS,IAA/B,mBAAkDjF,kBAI9E,IAGC,qBAAKhG,UAAU,oBAAf,SACM8K,EAAQ7H,KAAI,SAACkH,EAAOjH,GAAR,OAAkB,cAAC,GAAD,CAAqBiH,OAAQA,GAAfjH,QCtB1D,IAAM3B,GAAOd,OAAOC,QAAQ,QACpB0H,GAAU3H,OAAOC,QAAQ,YAAzB0H,MACA5G,GAAQf,OAAOC,QAAQ,oBAAvBc,IAEF+C,GAAY,IADA9D,OAAOC,QAAQ,QACf,CAAc,CAAE8D,SAAS,GAAD,OAAKhD,GAAII,aAAT,2BAG3B,SAASsJ,KACpB,MAAwB9H,qBAAWC,IAAnC,mBAAOC,EAAP,KAAawB,EAAb,KACQ1D,EAAO+J,cAAP/J,GACR,EAAgByD,oBAAS,WACrB,OAAOvB,EAAK8H,WAAU,SAAAtH,GAAG,OAAIA,EAAIjC,MAAQT,QADtC8B,EAAP,oBAIA,IAAe,IAAXA,EAAc,OAAO,qBAAKlD,UAAU,mBACxCuE,GAAUsD,eACV,IAAM5H,EAAQqD,EAAKJ,GAcnB,IAAMxB,EAAUH,GAAKI,KAAKH,GAAII,aAAc,YAAa,UAAzC,UAAuD0B,EAAKJ,GAAOrB,IAAnE,SAChB,OACI,sBAAK7B,UAAU,iBAAf,UACI,sBAAKA,UAAU,YAAf,UACI,qBAAKE,IAAKwB,EAAStB,IAAI,KACvB,sBAAKJ,UAAU,iBAAf,UACI,6BAAKC,EAAMgC,QACX,uBAAMjC,UAAU,aAAhB,UAA8BC,EAAMiC,KAApC,MAA6CjC,EAAMkC,MAAnD,MAA6DlC,EAAM8D,KAAKsH,iBACxE,4BAAIpL,EAAM6G,OACV,2CAAc7G,EAAMmC,cACpB,8CAAiBnC,EAAM2G,SAAvB,OACA,8CAAiB3G,EAAM4G,OAAvB,OACA,4CAAe5G,EAAM0G,MAArB,OAEA,sBAAK3G,UAAU,gBAAf,UACoB,UAAfC,EAAM8D,MAAoB,uBAAM1C,QAAS,kBAAM+G,GAAMsC,SAASzK,EAAMgF,WAA1C,UAAqD,cAAC,KAAD,CAAY3E,MAAM,MAAMgB,KAAK,OAAlF,cAC3B,uBAAMD,QAAS,kBA5BViK,EA4BgChI,EAAKJ,GAAOmE,MA3BjE3B,QAAQC,IAAI,YACZD,QAAQC,KAAK2F,QACb/G,GAAUgH,OAAO,CAAE1J,IAAK5B,EAAM4B,KAAO,CAAE2J,KAAM,CAAEnE,OAAQiE,IAAU,CAAEG,OAAO,IAAQ,SAACjG,EAAKkG,GACpF,GAAIlG,EAAK,OAAOE,QAAQC,IAAIH,GAC5BV,GAAQ,SAAAkB,GAEJ,OADAA,EAAK9C,GAAOmE,OAASiE,EACd,YAAItF,SAPvB,IAAyBsF,GA4BL,UAAyD,cAAC,IAAD,CAAOhL,MAAM,MAAMyC,KAAMO,EAAKJ,GAAOmE,MAAQ,MAAQ,OAAQ/F,KAAK,OAA3H,sBACA,uBAAMD,QAAS,kBAAM+G,GAAMuD,iBAAiB1L,EAAMgF,WAAlD,UAA8D,cAAC,KAAD,CAAM3E,MAAM,MAAMgB,KAAK,OAArF,iCAIK,WAAfrB,EAAM8D,MAAqB,cAAC,GAAD,CAAS8G,WAAY5K,EAAMgF,cCrDrD,SAAS2G,KACpB,MAAexI,qBAAWC,IAAnBC,EAAP,oBACA,EAA4BuB,mBAAS,IAArC,mBAAOgH,EAAP,KAAeC,EAAf,KACA,EAAsBjH,mBAAS,IAA/B,mBAAOY,EAAP,KAAYsG,EAAZ,KAoBA,OAlBAnE,qBAAU,WACN,GAAe,KAAXiE,EAAe,OAAOE,EAAO,IACjCA,GAAO,WACH,OAAO,YAAIzI,EAAKO,QAAO,SAAAC,GACnB,IACI,QAAIA,EAAI7B,MAAM+J,cAAc3G,SAASwG,KACjC/H,EAAI5B,KAAK+J,aAAeJ,MACxB/H,EAAI8C,SAASoF,cAAc3G,SAASwG,OACpC/H,EAAI+C,OAAOmF,cAAc3G,SAASwG,MAClC/H,EAAI6C,MAAMqF,cAAc3G,SAASwG,MAEvC,MAAO1C,GACL,OAAO,YAIpB,CAAC0C,IAGA,sBAAK7L,UAAU,iBAAf,UACI,uBAAO+J,YAAY,oBAAoBV,KAAK,OAAOJ,MAAO4C,EAAQK,SAAU,SAACrD,GAAD,OAAOiD,EAAUjD,EAAEG,OAAOC,QAAQjJ,UAAU,eACxH,qBAAKA,UAAU,iBAAf,SACKyF,EAAIxC,KAAI,SAAAkC,GAAI,OAAI,cAAC,EAAD,CAAsBlF,MAAOkF,GAAjBA,EAAKtD,a,aCXrCwB,GAAW8I,0BA8BTC,OA5Bf,WACE,MAAwBxH,IAAxB,mBAAOtB,EAAP,KAAawB,EAAb,KACA,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAACzB,GAASgJ,SAAV,CAAmBpD,MAAO,CAAC3F,EAAMwB,GAAjC,SACE,sBAAK1D,GAAG,MAAR,UACE,cAAC,EAAD,IACA,cAAC,IAAD,UACmB,IAAhBkC,EAAKyE,OAAe,qCACnB,qBAAIhG,MAAO,CAAEuK,UAAW,UAAxB,cAAqC,cAAC,KAAD,IAArC,OACA,cAAC,IAAD,CAAOC,OAAK,EAAChL,KAAK,YAAYiL,UAAWC,OACrC,qCACJ,cAAC,IAAD,CAAOF,OAAK,EAAChL,KAAK,IAAIiL,UAAWE,IACjC,cAAC,IAAD,CAAOH,OAAK,EAAChL,KAAK,UAAUiL,UAAWG,IACvC,cAAC,IAAD,CAAOJ,OAAK,EAAChL,KAAK,WAAWiL,UAAWI,IACxC,cAAC,IAAD,CAAOL,OAAK,EAAChL,KAAK,YAAYiL,UAAWC,IACzC,cAAC,IAAD,CAAOF,OAAK,EAAChL,KAAK,aAAaiL,UAAWK,KAC1C,cAAC,IAAD,CAAON,OAAK,EAAChL,KAAK,UAAUiL,UAAWM,KACvC,cAAC,IAAD,CAAOP,OAAK,EAAChL,KAAK,cAAciL,UAAWO,mBCpCzDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5db70449.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/LOGO.c8b8aed5.ico\";","import React from 'react'\r\nimport LOGO from '../Images/LOGO.ico';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport { Film, Heart, Home, Search, Settings, Tv } from 'react-feather';\r\n\r\nexport default function LeftNavBar() {\r\n    const location = useLocation();\r\n    return (\r\n        <nav>\r\n            <div className=\"brandinfo\">\r\n                <img title=\"Acatlog\" src={LOGO} alt=\"\" />\r\n            </div>\r\n            <div className=\"nav-links\">\r\n                <Link className=\"icon\" to=\"/\" title=\"Home\"><Home color={location.pathname === '/' ? 'red' : '#a3a3a3'} /></Link>\r\n                <Link className=\"icon\" to=\"/movies\" title=\"Movies\"><Film color={location.pathname === '/movies' ? 'red' : '#a3a3a3'} /></Link>\r\n                <Link className=\"icon\" to=\"/tvshows\" title=\"Web Series or tv Shows\"><Tv color={location.pathname === '/tvshows' ? 'red' : '#a3a3a3'} /></Link>\r\n                <Link className=\"icon\" to=\"/favorites\" title=\"Favorites\"><Heart color={location.pathname === '/favorites' ? 'red' : '#a3a3a3'} /></Link>\r\n                <Link className=\"icon\" to=\"/search\" title=\"Search\"><Search color={location.pathname === '/search' ? 'red' : '#a3a3a3'} /></Link>\r\n            </div>\r\n            <div className=\"settings\">\r\n                <Link className=\"icon\" to=\"/settings\" title=\"Settings\"><Settings color={location.pathname ==='/settings' ? 'red' : '#a3a3a3'} /></Link>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { X,Square,Minus } from 'react-feather';\r\n\r\n\r\nconst { remote } = window.require('electron');\r\n\r\nexport default function TopBar() {\r\n    function actionCenter(ACTION) {\r\n        const window = remote.getCurrentWindow();\r\n        if (ACTION === \"MINIMIZE\") window.minimize();\r\n        else if (ACTION === \"CLOSE\") window.close();\r\n        else if (ACTION === \"MAXIMIZE\") {\r\n            window.isMaximized() ? window.unmaximize() : window.maximize();\r\n        }\r\n        return\r\n    }\r\n\r\n    return (\r\n        <div id=\"topbar\">\r\n            <button onClick={() => actionCenter(\"MINIMIZE\")} ><Minus size=\"15\" /></button>\r\n            <button onClick={() => actionCenter(\"MAXIMIZE\")} ><Square size=\"15\" /></button>\r\n            <button onClick={() => actionCenter(\"CLOSE\")} ><X size=\"15\" /></button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nconst path = window.require('path');\r\nconst { app } = window.require('@electron/remote');\r\n\r\nexport default function TittleCard({ title }) {\r\n    const imgpath = 'url(\"' + path.join(app.getAppPath(), \"Datafiles\", \"posters\", `${title._id}.jpg`).replaceAll('\\\\', '/') + '\")';\r\n    // ! Remove url\r\n    return (\r\n        <Link to={`/tittle/${title._id}`} className='tittle-card' style={{ backgroundImage: imgpath }} >\r\n            <div className=\"tittle-info\">\r\n                {/* Name,Year,Pg-Rating,Imdb */}\r\n                <span className=\"tittle-name\">{title.Title}</span>\r\n                <span> {title.Year} ● {title.Rated} </span>\r\n                <span> imdb: {title.imdbRating} </span>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n","import React, { useRef } from 'react';\r\nimport { ArrowLeftCircle, ArrowRightCircle } from 'react-feather';\r\nimport TCARD from './TittleCard';\r\n\r\nexport default function CardSlider({ tittles }) {\r\n    const slide = useRef();\r\n    return (\r\n        <div className=\"card-slider\" >\r\n            {/* Two Buttons */}\r\n            <button onClick={() => slide.current.scrollBy({ left: slide.current.clientWidth, behavior: \"smooth\" })} style={{ right: '10px' }} className=\"move-slides slide-right\"> <ArrowRightCircle fill=\"white\" color=\"red\" size=\"30\" /> </button>\r\n            <button onClick={() => slide.current.scrollBy({ left: -slide.current.clientWidth, behavior: \"smooth\" })} style={{ left: '10px' }} className=\"move-slides slide-left\"> <ArrowLeftCircle fill=\"white\" color=\"red\" size=\"30\" /> </button>\r\n            <div ref={slide} className=\"slides-container\">\r\n                {tittles.map((title, index) => <TCARD key={index} title={title} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { DATABASE } from '../App';\r\nimport CARDSLIDER from '../Components/CardSlider';\r\n\r\nexport default function Home() {\r\n    const [data] = useContext(DATABASE);\r\n\r\n    return (\r\n        <div className=\"page-container\">\r\n            <div className=\"cards-category\">\r\n                <h3>Random Picks</h3>\r\n                <CARDSLIDER tittles={[...data].sort((a, b) => Math.random() < .5 ? 1 : -1).slice(0, 6)} />\r\n            </div>\r\n            <div className=\"cards-category\">\r\n                <h3>Top Movies</h3>\r\n                <CARDSLIDER tittles={[...data].filter(ele => ele.Type === 'movie').sort((a, b) => b.imdbRating - a.imdbRating).slice(0, 8)} />\r\n            </div>\r\n            <div className=\"cards-category\">\r\n                <h3>Top Tv Shows</h3>\r\n                <CARDSLIDER tittles={[...data].filter(ele => ele.Type === 'series').sort((a, b) => b.imdbRating - a.imdbRating).slice(0, 8)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { DATABASE } from '../App';\r\nimport TCARD from '../Components/TittleCard';\r\n\r\nexport default function Movies() {\r\n    const [data] = useContext(DATABASE);\r\n\r\n\r\n    return (\r\n        <div className=\"page-container\">\r\n            <br />\r\n            <h2>Movies</h2>\r\n            <div className=\"grid-container\">\r\n                {data.filter(ele => ele.Type === 'movie').map((movie, index) => <TCARD key={index} title={movie} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { DATABASE } from '../App';\r\nimport TCARD from '../Components/TittleCard';\r\n\r\nexport default function TvShows() {\r\n    const [data] = useContext(DATABASE);\r\n    return (\r\n        <div className=\"page-container\">\r\n            <br />\r\n            <h2>Tv Shows</h2>\r\n            <div className=\"grid-container\">\r\n                {data.filter(ele => ele.Type === 'series').map((series, index) => <TCARD key={index} title={series} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst Datastore = window.require('nedb');\r\nconst { app } = window.require('@electron/remote');\r\nconst pathmod = window.require('path');\r\nconst fs = window.require('fs');\r\n\r\nconst inventory = new Datastore({ filename: `${app.getAppPath()}/Datafiles/.inventory` });\r\nconst db = new Datastore({ filename: `${app.getAppPath()}/Datafiles/.folderslist` });\r\nexport const apikey = fs.readFileSync(`${app.getAppPath()}/Datafiles/.USER_API`, 'utf-8');\r\n\r\nexport default function useInventory() {\r\n    const [data, setData] = useState([]);\r\n    const acceptExt = ['', '.mp4', '.mkv', '.avi'];\r\n\r\n    // File format => <tittlename>\r\n    function fetchdetails(tname, filepath, isSub) {\r\n        let ryear = tname.match(/\\(\\d{4}\\)$/g);\r\n        ryear = ryear ? ryear[0].trim().match(/\\d+/g)[0] : \"\";\r\n        tname = tname.replace(/\\(\\d{4}\\)$/g, \"\").trim();\r\n        fetch(`http://www.omdbapi.com/?&apikey=${apikey}&t=${tname}&y=${ryear}`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (!res || res?.Response === 'False') return;\r\n                var { Title, Year, Type, Rated, Runtime, Genre, Director, Actors, Plot, Language, Poster, imdbRating } = res;\r\n                Poster = Poster.replace('SX3', 'SX6');\r\n                imdbRating = Number(imdbRating);\r\n                Year = Number(Year);\r\n\r\n                fetch(Poster).then(response => response.arrayBuffer()).then(response => {\r\n                    // Appedn Files\r\n                    if (isSub) {\r\n                        inventory.insert({ Title, Year, Type, Rated, Runtime, Genre, Director, Actors, Plot, Language, imdbRating, filepath, isFav: false },\r\n                            (err, newDoc) => {\r\n                                if (err) return;\r\n                                fs.writeFileSync(pathmod.join(app.getAppPath(), \"Datafiles\", \"posters\", `${newDoc._id}.jpg`), new Uint8Array(response));\r\n                                setData(prev => [...prev, newDoc]);\r\n                            })\r\n                    }\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n\r\n    function fileOfDir(filepath, isSub) {\r\n        const item = pathmod.parse(filepath);\r\n        if (!acceptExt.includes(item.ext)) return;\r\n        inventory.findOne({ filepath }, (err, res) => {\r\n            if (err) return console.log(err);\r\n            if (isSub && res) {\r\n                const filetime = fs.statSync(filepath);\r\n                res.mtime = filetime.mtimeMs;\r\n                setData(prev => [res, ...prev]);\r\n            }\r\n            else fetchdetails(item.name.trim(), filepath, isSub);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        let isSub = true;\r\n        db.loadDatabase();\r\n        inventory.loadDatabase();\r\n        db.find({}, (err, response) => {\r\n            if (err || response.length === 0 || apikey === \"\") return window.location.hash = \"/settings\";\r\n            response.forEach(ele => {\r\n                fs.readdir(ele.path, (err, res) => {\r\n                    res.forEach(r => fileOfDir(pathmod.join(ele.path, r), isSub));\r\n                })\r\n            })\r\n            console.log('Loading Complete');\r\n        })\r\n        return () => isSub = false;\r\n    }, []);\r\n\r\n    return [data, setData];\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { FolderPlus, Plus, Trash } from 'react-feather';\r\nimport { apikey } from '../useInventory';\r\n\r\nconst Datastore = window.require('nedb');\r\nconst { shell } = window.require('electron');\r\nconst { app } = window.require('@electron/remote');\r\nconst pathmod = window.require('path');\r\nconst fs = window.require('fs');\r\n\r\nconst db = new Datastore({ filename: `${app.getAppPath()}/Datafiles/.folderslist` });\r\n\r\nexport default function Settings() {\r\n    const [folders, setFolder] = useState([]);\r\n    const [userapi, setuserapi] = useState(() => apikey === \"\" ? null : apikey);\r\n\r\n    function appendPath(e) {\r\n        e.preventDefault();\r\n        const path = pathmod.resolve(e.target.path.value);\r\n        try {\r\n            const dir = fs.statSync(path);\r\n            if (!dir.isDirectory()) return e.target.path.value = e.target.path.value + \" - Is not Folder\";\r\n            db.insert({ path }, (err) => {\r\n                if (err) return console.log(err);\r\n                setFolder(prev => [{ path }, ...prev]);\r\n            })\r\n        } catch (error) {\r\n            e.target.path.value = e.target.path.value + \" - Folder Doesnt Exsists\";\r\n            return\r\n        }\r\n    }\r\n\r\n    function deletePath(path, i) {\r\n        db.remove({ path }, (err) => {\r\n            if (err) return console.log(err);\r\n            setFolder(prev => {\r\n                prev.splice(i, 1);\r\n                return [...prev];\r\n            })\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        let isSub = true;\r\n        db.loadDatabase();\r\n        db.find({}, (err, data) => {\r\n            if (isSub) setFolder(data);\r\n        })\r\n        return () => {\r\n            isSub = false\r\n        };\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"page-container\">\r\n            <h1>Settings</h1>\r\n            <div className=\"api-key-info\">\r\n                {userapi ? <span> Your Api Key : {userapi} <span onClick={() => setuserapi(null)} className=\"get-key\">edit key</span> </span> : <Apikey setkey={setuserapi} />}\r\n            </div>\r\n            <div className=\"folder-list\">\r\n                <h3>Choose where to look up for Movies and Tv Shows</h3>\r\n                <form onSubmit={appendPath}>\r\n                    <input required type=\"text\" name=\"path\" />\r\n                    <button type=\"submit\"> <FolderPlus color=\"red\" />  </button>\r\n                </form>\r\n                {folders.map((ele, index) => <FolderFile deletePath={() => deletePath(ele.path, index)} key={index} path={ele.path} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction FolderFile({ path, deletePath }) {\r\n    return (\r\n        <div className=\"folder-name\">\r\n            <div>\r\n                <div className=\"folder-title\">\r\n                    {path.split(pathmod.sep)[path.split(pathmod.sep).length - 1]}\r\n                </div>\r\n                <div className=\"folder-path\">{path}</div>\r\n            </div>\r\n            <div onClick={() => deletePath()} ><Trash size=\"20\" /></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Apikey({ setkey }) {\r\n    function addApikey(e) {\r\n        e.preventDefault();\r\n        const key = e.target.key.value;\r\n        fetch(`http://www.omdbapi.com/?i=tt3896198&apikey=${key}`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.Response === \"True\") {\r\n                    setkey(key);\r\n                    fs.writeFileSync(`${app.getAppPath()}/Datafiles/.USER_API`, key);\r\n                } else {\r\n                    e.target.key.value += \"- Seems to be Invaild or Not Activated\";\r\n                }\r\n            })\r\n        // check the key else return;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>You will require an OMDB API KEY for fetching Information about Videos.<span onClick={() => shell.openExternal(\"https://www.omdbapi.com/apikey.aspx\")} className=\"get-key\">Get key here</span> </h3>\r\n            <p></p>\r\n            <form onSubmit={addApikey} >\r\n                <input placeholder=\"Make sure you give correct api key.😄\" required type=\"text\" name=\"key\" />\r\n                <button type=\"submit\"><Plus /></button>\r\n            </form>\r\n        </>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport { DATABASE } from '../App';\r\nimport TCARD from '../Components/TittleCard';\r\n\r\nexport default function Favorites() {\r\n    const [data] = useContext(DATABASE);\r\n    return (\r\n        <div className=\"page-container\">\r\n            <br />\r\n            <h2>Favorites</h2>\r\n            <div className=\"grid-container\">\r\n                {data.filter(ele => ele.isFav).map((favs, index) => <TCARD key={index} title={favs} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { ArrowDownCircle, PlayCircle } from 'react-feather';\r\n\r\nconst { shell } = window.require('electron');\r\n\r\nexport default function NSeason({ season }) {\r\n    const [show, setShow] = useState(false);\r\n\r\n    return (\r\n        <div className=\"season-card\" >\r\n            <div className=\"drop-down-list-seasons\">\r\n                <h3>{season.name}</h3>\r\n                <ArrowDownCircle rotate=\"90\" onClick={() => setShow(prev => !prev)} />\r\n            </div>\r\n            <div className=\"episodes-list\" style={{ maxHeight: show ? '200vh' : 0 }} >\r\n                {season.episodes.map((epi,index) => (\r\n                    <div key={index} className=\"episode\" onClick={() => shell.openPath(epi.epipath)} >\r\n                        <PlayCircle color=\"red\" />\r\n                        <span>{epi.name}</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport NSEASON from './NSeason';\r\n\r\nconst path = window.require('path');\r\nconst fs = window.require('fs');\r\n\r\nexport default function SeriesEpisodes({ folderpath }) {\r\n    const [seasons, setSeasons] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const acceptedVideos = ['.mp4', '.mkv', '.avi'];\r\n        fs.readdir(folderpath, (err, seasons) => {\r\n            if (err) return;\r\n            seasons.forEach(season => {\r\n                if (path.parse(season).ext !== \"\") return;\r\n                fs.readdir(path.join(folderpath, season), (err, episodes) => {\r\n                    let mainepisodes = episodes.filter(epi => acceptedVideos.includes(path.parse(epi).ext));\r\n                    mainepisodes = mainepisodes.map(epi => {\r\n                        return { epipath: path.join(folderpath, season, epi), name: path.parse(epi).name }\r\n                    })\r\n                    setSeasons(prev => [{ name: season, episodes: mainepisodes }, ...prev]);\r\n                })\r\n            })\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"seasons-container\">\r\n            { seasons.map((season,index) => <NSEASON key={index} season={season} /> ) }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { DATABASE } from '../App';\r\nimport { File, Heart, PlayCircle } from 'react-feather';\r\nimport SEASONS from '../Components/SeriesEpisodes';\r\n\r\nconst path = window.require('path');\r\nconst { shell } = window.require('electron');\r\nconst { app } = window.require('@electron/remote');\r\nconst Datastore = window.require('nedb');\r\nconst inventory = new Datastore({ filename: `${app.getAppPath()}/Datafiles/.inventory` });\r\n\r\n\r\nexport default function TitlePage() {\r\n    const [data, setData] = useContext(DATABASE);\r\n    const { id } = useParams();\r\n    const [index] = useState(() => {\r\n        return data.findIndex(ele => ele._id === id);\r\n    });\r\n\r\n    if (index === -1) return <div className=\"page-container\"></div>\r\n    inventory.loadDatabase();\r\n    const title = data[index];\r\n\r\n    function tooglefavorites(flag) {\r\n        console.log(\"Updating\");\r\n        console.log(!flag);\r\n        inventory.update({ _id: title._id }, { $set: { isFav: !flag } }, { multi: true }, (err, d) => {\r\n            if (err) return console.log(err);\r\n            setData(prev => {\r\n                prev[index].isFav = !flag;\r\n                return [...prev];\r\n            })\r\n        });\r\n    }\r\n\r\n    const imgpath = path.join(app.getAppPath(), \"Datafiles\", \"posters\", `${data[index]._id}.jpg`);\r\n    return (\r\n        <div className=\"page-container\">\r\n            <div className=\"page-info\">\r\n                <img src={imgpath} alt=\"\" />\r\n                <div className=\"page-info-data\">\r\n                    <h1>{title.Title}</h1>\r\n                    <span className=\"year-rated\">{title.Year} | {title.Rated} | {title.Type.toUpperCase()}</span>\r\n                    <p>{title.Plot}</p>\r\n                    <span>Imdb : {title.imdbRating}</span>\r\n                    <span>Director: {title.Director} </span>\r\n                    <span>Starring: {title.Actors} </span>\r\n                    <span> Genre: {title.Genre} </span>\r\n\r\n                    <div className=\"video-options\">\r\n                        {title.Type === 'movie' && <span onClick={() => shell.openPath(title.filepath)}><PlayCircle color=\"red\" size=\"35\" />Play Now</span>}\r\n                        <span onClick={() => tooglefavorites(data[index].isFav)}><Heart color=\"red\" fill={data[index].isFav ? \"red\" : \"none\"} size=\"35\" />Add to favorites</span>\r\n                        <span onClick={() => shell.showItemInFolder(title.filepath)} ><File color=\"red\" size=\"35\" />Open File Location</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            { title.Type === 'series' && <SEASONS folderpath={title.filepath} />}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { DATABASE } from '../App';\r\nimport TCARD from '../Components/TittleCard';\r\n\r\nexport default function Search() {\r\n    const [data] = useContext(DATABASE);\r\n    const [search, setSearch] = useState('');\r\n    const [res, setRes] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (search === \"\") return setRes([]);\r\n        setRes(() => {\r\n            return [...data.filter(ele => {\r\n                try {\r\n                    if (ele.Title.toLowerCase().includes(search)) return true;\r\n                    if (ele.Year.toString() === search) return true;\r\n                    if (ele.Director.toLowerCase().includes(search)) return true;\r\n                    if (ele.Actors.toLowerCase().includes(search)) return true;\r\n                    if (ele.Genre.toLowerCase().includes(search)) return true;\r\n                    return false;\r\n                } catch (error) {\r\n                    return false;\r\n                }\r\n            })]\r\n        })\r\n    }, [search]);\r\n\r\n    return (\r\n        <div className=\"page-container\">\r\n            <input placeholder=\"Start your Search\" type=\"text\" value={search} onChange={(e) => setSearch(e.target.value)} className=\"search-bar\" />\r\n            <div className=\"grid-container\">\r\n                {res.map(item => <TCARD key={item._id} title={item} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { createContext } from 'react';\nimport NAV from './Components/LeftNavBar';\nimport TOBAR from './Components/TopBar';\n\n\n// Router\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport HOME from './Routes/Home';\nimport MOVIES from './Routes/Movies';\nimport TVSHOWS from './Routes/TvShows';\nimport SETTINGS from './Routes/Settings';\nimport FAVO from './Routes/Favorites';\nimport TPAGE from './Routes/TitlePage';\nimport SEARCH from './Routes/Search';\n\nimport useInventory from './useInventory';\nimport { Loader } from 'react-feather';\n\n\n\nexport const DATABASE = createContext();\n\nfunction App() {\n  const [data, setData] = useInventory();\n  return (\n    <HashRouter>\n      <NAV />\n      <DATABASE.Provider value={[data, setData]}>\n        <div id=\"app\">\n          <TOBAR />\n          <Switch>\n            {data.length === 0 ? <>\n              <h1 style={{ textAlign: 'center' }}> <Loader /> </h1>\n              <Route exact path=\"/settings\" component={SETTINGS} />\n            </> : <>\n              <Route exact path=\"/\" component={HOME} />\n              <Route exact path=\"/movies\" component={MOVIES} />\n              <Route exact path=\"/tvshows\" component={TVSHOWS} />\n              <Route exact path=\"/settings\" component={SETTINGS} />\n              <Route exact path=\"/favorites\" component={FAVO} />\n              <Route exact path=\"/search\" component={SEARCH} />\n              <Route exact path=\"/tittle/:id\" component={TPAGE} />\n            </>}\n          </Switch>\n        </div>\n      </DATABASE.Provider>\n    </HashRouter>\n  );\n}\n\nexport default App;\n\n\n// Root\n// Nav | Body\n//     | Body flex Close\n//     |           Main Area - Over (width of nav minus rem)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}